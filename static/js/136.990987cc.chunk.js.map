{"version":3,"file":"static/js/136.990987cc.chunk.js","mappings":"mLAMA,MA+BA,EA/B2BA,EAAAA,YAAiB,CAAAC,EAWzCC,KAAQ,IAXkC,SAC3CC,EAAQ,UACRC,EAAS,QACTC,EAAO,SACPC,EAAQ,WACRC,EAAU,MACVC,EAAK,KACLC,EAAI,QACJC,EAAO,WACPC,KACGC,GACJX,EACC,MAAMY,GAAoBC,EAAAA,EAAAA,IAAmBX,EAAU,SACjDY,EAAUC,IAAWZ,EAAWS,EAAmBH,GAAW,GAAGG,KAAqBH,IAAWD,GAAQ,GAAGI,KAAqBJ,IAAQJ,GAAW,GAAGQ,KAAwC,kBAAZR,EAAuB,WAAWA,IAAY,YAAaC,GAAY,GAAGO,aAA8BN,GAAc,GAAGM,eAAgCL,GAAS,GAAGK,WACxVI,GAAqBC,EAAAA,EAAAA,KAAK,QAAS,IACpCN,EACHR,UAAWW,EACXb,IAAKA,IAEP,GAAIS,EAAY,CACd,IAAIQ,EAAkB,GAAGN,eAIzB,MAH0B,kBAAfF,IACTQ,EAAkB,GAAGA,KAAmBR,MAEtBO,EAAAA,EAAAA,KAAK,MAAO,CAC9Bd,UAAWe,EACXC,SAAUH,GAEd,CACA,OAAOA,CAAK,I,kCCvBd,IAAII,GAAQC,EAAAA,EAAAA,OAAK,WAEf,OADAC,QAAQC,IAAI,gDACLN,EAAAA,EAAAA,KAAA,OAAAE,SAAK,sBACd,IAkEA,QA/DA,YAKEK,EAAAA,EAAAA,UAAQ,IAfD,OAqBP,IAAIC,GAAQC,EAAAA,EAAAA,KAAaD,GAAgBA,IAGrCE,GAAWC,EAAAA,EAAAA,OAEVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,GAEjC,OACEC,EAAAA,EAAAA,MAAA,OAAAb,SAAA,EACEF,EAAAA,EAAAA,KAACG,EAAK,KACNH,EAAAA,EAAAA,KAAA,UAAQgB,QAASA,KAAKH,EAASD,EAAM,EAAE,EAAEV,SAAC,QAC1Ca,EAAAA,EAAAA,MAAA,MAAAb,SAAA,CAAKM,EAAMS,KAAKC,KAAMV,EAAMS,KAAKE,IAAI,sCACrCnB,EAAAA,EAAAA,KAAA,UAAQgB,QAASA,KACfN,GAASU,EAAAA,EAAAA,GAAS,KAAK,EACvBlB,SAAC,wDACHa,EAAAA,EAAAA,MAACM,EAAK,CAAAnB,SAAA,EACVF,EAAAA,EAAAA,KAAA,SAAAE,UACEa,EAAAA,EAAAA,MAAA,MAAAb,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,OACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,wBACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,kBACJF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mCAGRF,EAAAA,EAAAA,KAAA,SAAAE,SAGIM,EAAMc,KAAKC,KAAI,CAACC,EAAGC,KAEjBV,EAAAA,EAAAA,MAAA,MAAAb,SAAA,EACEF,EAAAA,EAAAA,KAAA,MAAAE,SAAKuB,EAAE,KACPzB,EAAAA,EAAAA,KAAA,MAAAE,SAAKM,EAAMc,KAAKG,GAAGC,MACnB1B,EAAAA,EAAAA,KAAA,MAAAE,SAAKM,EAAMc,KAAKG,GAAGP,QACnBlB,EAAAA,EAAAA,KAAA,MAAAE,SAAKM,EAAMc,KAAKG,GAAGb,SACnBZ,EAAAA,EAAAA,KAAA,MAAAE,UACEF,EAAAA,EAAAA,KAAA,UAAQgB,QAASA,KACfN,GAASiB,EAAAA,EAAAA,IAAenB,EAAMc,KAAKG,GAAGC,IAAI,EAC1CxB,SAAC,UAREuB,YAoBjB,C","sources":["../node_modules/react-bootstrap/esm/Table.js","routes/Cart.jsx"],"sourcesContent":["\"use client\";\n\nimport classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst Table = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  striped,\n  bordered,\n  borderless,\n  hover,\n  size,\n  variant,\n  responsive,\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'table');\n  const classes = classNames(className, decoratedBsPrefix, variant && `${decoratedBsPrefix}-${variant}`, size && `${decoratedBsPrefix}-${size}`, striped && `${decoratedBsPrefix}-${typeof striped === 'string' ? `striped-${striped}` : 'striped'}`, bordered && `${decoratedBsPrefix}-bordered`, borderless && `${decoratedBsPrefix}-borderless`, hover && `${decoratedBsPrefix}-hover`);\n  const table = /*#__PURE__*/_jsx(\"table\", {\n    ...props,\n    className: classes,\n    ref: ref\n  });\n  if (responsive) {\n    let responsiveClass = `${decoratedBsPrefix}-responsive`;\n    if (typeof responsive === 'string') {\n      responsiveClass = `${responsiveClass}-${responsive}`;\n    }\n    return /*#__PURE__*/_jsx(\"div\", {\n      className: responsiveClass,\n      children: table\n    });\n  }\n  return table;\n});\nexport default Table;","import { Table } from \"react-bootstrap\"\r\nimport { useDispatch, useSelector } from \"react-redux\"\r\nimport { changeName, increase } from \"../store/userSlice.jsx\";\r\nimport { changeQuantity } from \"../store.jsx\";\r\nimport { memo, useMemo, useState } from \"react\";\r\n\r\n\r\nfunction 함수(){\r\n  return null;\r\n}\r\n\r\n// 이렇게 memo로 감싸주면 꼭 필요할때만 렌더링되게 해라 라는 의미임\r\nlet Child = memo(function(){\r\n  console.log('재랜더링 확인용');\r\n  return <div>자식임</div>\r\n})\r\n\r\n\r\nfunction Cart(){\r\n\r\n  let result = 함수();\r\n  // 아래와 같이 useMemo를 사용하면 컴포넌트 렌더링 시 1회만 실행해줌 \r\n  // useEffect와 기능상 동일하다고 보면됨\r\n  useMemo(()=>{return 함수()})\r\n\r\n\r\n  // redux store를 가져와주는 함수 => useSelector(), 중괄호와 return은 생략가능\r\n  // state는 redux사용시 store에 들어가 있는 데이터 모두를 가져오는 것임 \r\n  // return 부분에 특정 데이터만 가지고 올 수도 있음\r\n  let state = useSelector((state)=>{return state});\r\n\r\n  // 아래 dispatch는 store.jsx에 요청을 보내주는 역할을 하는 함수임\r\n  let dispatch = useDispatch();\r\n\r\n  let [count, setCount] = useState(0);\r\n\r\n  return(\r\n    <div>\r\n      <Child></Child>\r\n      <button onClick={()=>{setCount(count+1)}}>+ </button>\r\n      <h6>{state.user.name}{state.user.age}의 장바구니</h6>\r\n      <button onClick={()=>{\r\n        dispatch(increase(100));\r\n      }}>숫자올리기 버튼(redux)</button>\r\n      <Table>\r\n  <thead>\r\n    <tr>\r\n      <th>#</th>\r\n      <th>상품명</th>\r\n      <th>수량</th>\r\n      <th>변경하기</th>\r\n    </tr>\r\n  </thead>\r\n  <tbody>\r\n\r\n    {\r\n      state.cart.map((a, i)=>{\r\n        return(\r\n        <tr key={i}>\r\n          <td>{i+1}</td>\r\n          <td>{state.cart[i].id}</td>\r\n          <td>{state.cart[i].name}</td>\r\n          <td>{state.cart[i].count}</td>\r\n          <td>\r\n            <button onClick={()=>{\r\n              dispatch(changeQuantity(state.cart[i].id))\r\n            }}>+</button>\r\n          </td>\r\n        </tr>\r\n        )\r\n      })\r\n    }\r\n\r\n    \r\n  </tbody>\r\n</Table> \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport default Cart"],"names":["React","_ref","ref","bsPrefix","className","striped","bordered","borderless","hover","size","variant","responsive","props","decoratedBsPrefix","useBootstrapPrefix","classes","classNames","table","_jsx","responsiveClass","children","Child","memo","console","log","useMemo","state","useSelector","dispatch","useDispatch","count","setCount","useState","_jsxs","onClick","user","name","age","increase","Table","cart","map","a","i","id","changeQuantity"],"sourceRoot":""}